///
/// Shorthand mixin for border property.
///
/// @param {number | list} $borders - border width property/ properties
///
/// @param {string} $style - border style type
///
/// @param {color} $color - border color
///
/// @todo Add option to pass multiple `$styles` and `$colors` arguments
///
/// @example
///
/// border(10px, 'solid', #BADa55)
/// //  border: 10px solid #BADa55;
///
/// border(10px 20px, 'dotted', #444)
///  // border-top: 10px dotted #444;
///  // border-bottom: 10px dotted #444;
///  // border-left: 20px dotted #444;
///  // border-right: 20px dotted #444;
///
/// border(10px 20px 30px, 'dashed', red)
///  // border-top: 10px dashed red;
///  // border-bottom: 30px dashed red;
///  // border-left: 20px dashed red;
///  // border-right: 20px dashed red;
///
/// border(10px 20px 30px 40px, 'solid', #663399)
///  // border-top: 10px solid #663399;
///  // border-right: 20px solid #663399;
///  // border-bottom: 30px solid #663399;
///  // border-left: 40px solid #663399;
///
/// @output Border `width`, `style` and `color` property/properties
///
/// @throw Invalid border style argument warning
///

@mixin border($borders, $styles, $colors) {
	@debug __ length($borders) length($styles) length($colors);
	@if type-of($borders) == 'number' and
		type-of($styles) == 'string' and
		type-of($colors) == 'color' {

	} @else if length($borders) == length($styles) and
		ength($styles) == length($colors) and
		type-of($styles) == list {

	} @else if (type-of($borders) == 'list' or 'border') and
		(type-of($styles) == 'list' or 'string') and
		(type-of($colors) == 'list' or 'color') {

	}
}

